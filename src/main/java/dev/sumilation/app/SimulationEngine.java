package dev.sumilation.app;

import dev.sumilation.domain.creature.Creature;
import dev.sumilation.domain.creature.Herbivore;
import dev.sumilation.domain.creature.Predator;
import dev.sumilation.domain.entity.Entity;
import dev.sumilation.domain.entity.geometry.Position;

import java.util.*;

public class SimulationEngine {
    private final SimulationMap simMap;

    public SimulationEngine(SimulationMap simMap) {
        this.simMap = simMap;
    }

    public void makeTurn() {
        // 0) –§–∞–∑–∞ –≥–æ–ª–æ–¥–∞ ‚Äî –µ–¥–∏–Ω–∞—è –¥–ª—è –≤—Å–µ—Ö
        List<Entity> units = new ArrayList<>(simMap.getWorldMap().values());
        for (Entity e : units) {
            if (e instanceof Creature c) {
                c.setHealth(c.getHealth() - 1);
                if (c.getHealth() <= 0) {
                    simMap.getWorldMap().remove(c.getPosition());
                }
            }
        }

        // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –∫–∞—Ä—Ç—ã. (–ß—Ç–æ–±—ã –Ω–µ –º–µ–Ω—è—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É –≤–æ –∏–∑–±–µ–∂–∞–Ω–∏–µ –æ—à–∏–±–æ–∫).
        List<Entity> snapshot = new ArrayList<>(simMap.getWorldMap().values());

        // –õ–æ–≥–∏–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ö–æ–¥–∞
        Map<Creature, Position> planned = new HashMap<>();
        for (Entity e : snapshot) {
            if (e instanceof Creature c) {
                Position p = c.planMove(simMap);
                if (p != null && simMap.inBounds(p.x(), p.y())) {
                    planned.put(c, p);
                }
            }
        }

        // –ö–∞—Ä—Ç–∞ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ —Å—É—â–µ—Å—Ç–≤
        Map<Position, Entity> startOcc = new HashMap<>();
        for (Entity e : snapshot) {
            startOcc.put(e.getPosition(), e);
        }

        // –ö–∞—Ä—Ç–∞ –∫—Ç–æ –∫—É–¥–∞ —Ö–æ—á–µ—Ç
        Map<Position, List<Creature>> wishers = new HashMap<>();
        for (var e : planned.entrySet()) {
            Position target = e.getValue();
            Creature who = e.getKey();
            wishers.computeIfAbsent(target, k -> new ArrayList<>()).add(who);
        }

        // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ö–æ–¥–æ–≤
        Set<Creature> moved = new HashSet<>();

        for (var e : wishers.entrySet()) {
            Position target = e.getKey();
            var list = e.getValue();

            if (list.size() != 1) {
                Collections.shuffle(list);
            }

            Creature c = list.get(0);
            if (moved.contains(c)) continue;

            // –ï—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤–æ —É–∂–µ –ù–ï –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–≤–æ–µ–π —Ç–µ–∫—É—â–µ–π (—Å—Ç–∞—Ä—Ç–æ–≤–æ–π –¥–ª—è —Ç–∏–∫–∞) –∫–ª–µ—Ç–∫–µ,
            // –∑–Ω–∞—á–∏—Ç –µ–≥–æ —Å—ä–µ–ª–∏/—Å–º–µ—Å—Ç–∏–ª–∏ —Ä–∞–Ω–µ–µ –≤ —ç—Ç–æ–º –∂–µ —Ç–∏–∫–µ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ–≥–æ —Ö–æ–¥.
            Entity stillThere = simMap.getWorldMap().get(c.getPosition());
            if (stillThere != c) {
                continue;
            }

            Entity occ = simMap.getEntityAt(target);
            if (c instanceof Herbivore && occ instanceof Creature) {
                continue; // —Ç—Ä–∞–≤–æ—è–¥–Ω–æ–µ –Ω–µ –∏–¥—ë—Ç –≤ –∑–∞–Ω—è—Ç–æ–µ
            }

            if (c instanceof Predator) {
                // —Ö–∏—â–Ω–∏–∫ –∏–¥—ë—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤ –∫–ª–µ—Ç–∫–µ –ª–∏–±–æ –ø—É—Å—Ç–æ, –ª–∏–±–æ –æ–≤—Ü–∞
                if (occ != null && !(occ instanceof Herbivore)) {
                    continue;
                }
            }


            c.applyMove(target, simMap);
            moved.add(c);


        }

        System.out.println("== HP –æ–≤–µ—Ü –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç ==");
        simMap.getWorldMap().values().stream()
                .filter(eboy -> eboy instanceof Herbivore)
                .map(eboy -> (Herbivore) eboy)
                .forEach(h -> System.out.printf("üêë at %s ‚Üí HP: %d%n", h.getPosition(), h.getHealth()));
        System.out.println();

        System.out.println("== HP –≤–æ–ª–∫–æ–≤ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç ==");
        simMap.getWorldMap().values().stream()
                .filter(eboy -> eboy instanceof Predator)
                .map(eboy -> (Predator) eboy)
                .forEach(p -> System.out.printf("\uD83D\uDC3A at %s ‚Üí HP: %d%n", p.getPosition(), p.getHealth()));
        System.out.println();
    }

        void nextTurn () {

        }
        void startSimulation () {
        }
        void stopSimulation () {
        }
    }