package dev.sumilation.app;

import dev.sumilation.domain.creature.Creature;
import dev.sumilation.domain.creature.Herbivore;
import dev.sumilation.domain.creature.Predator;
import dev.sumilation.domain.entity.Entity;
import dev.sumilation.domain.entity.geometry.Direction;
import dev.sumilation.domain.entity.geometry.Position;
import dev.sumilation.domain.object.Grass;

import java.util.*;

public class SimulationEngine {
    private final SimulationMap simMap;
    private final Random rnd = new Random();

    private static final double GRASS_SPREAD_PROB = 0.15;   // —à–∞–Ω—Å —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –≤ —Å–æ—Å–µ–¥–Ω—é—é –∫–ª–µ—Ç–∫—É
    private static final int    GRASS_MAX_NEIGHBOR_PLANTS = 2;  // –º–∞–∫—Å–∏–º—É–º ¬´–¥–µ—Ç–µ–π¬ª –æ—Ç –æ–¥–Ω–æ–π —Ç—Ä–∞–≤–∏–Ω–∫–∏ –∑–∞ —Ç–∏–∫
    private static final int    GRASS_RANDOM_SEEDS = 8;     // —Å–ª—É—á–∞–π–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –ø–æ—Å–µ–≤–∞ –ø–æ –∫–∞—Ä—Ç–µ –∑–∞ —Ç–∏–∫
    private static final double GRASS_RANDOM_PROB  = 0.35;  // —à–∞–Ω—Å —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ—Å–µ–≤–∞

    public SimulationEngine(SimulationMap simMap) {
        this.simMap = simMap;
    }

    public void makeTurn() {
        hungerPhase();
        movementPhase();
        reproductionPhase();
        grassGrowthPhase();


        // –¢—É—Ç –ø—Ä–æ—Å—Ç–æ –¥–µ–±–∞–≥
        System.out.println("== HP –æ–≤–µ—Ü –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç ==");
        simMap.getWorldMap().values().stream()
                .filter(eboy -> eboy instanceof Herbivore)
                .map(eboy -> (Herbivore) eboy)
                .forEach(h -> System.out.printf("üêë at %s ‚Üí HP: %d%n", h.getPosition(), h.getHealth()));
        System.out.println();

        System.out.println("== HP –≤–æ–ª–∫–æ–≤ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç ==");
        simMap.getWorldMap().values().stream()
                .filter(eboy -> eboy instanceof Predator)
                .map(eboy -> (Predator) eboy)
                .forEach(p -> System.out.printf("\uD83D\uDC3A at %s ‚Üí HP: %d%n", p.getPosition(), p.getHealth()));
        System.out.println();
    }

    private void hungerPhase() {
        List<Entity> units = new ArrayList<>(simMap.getWorldMap().values());
        for (Entity e : units) {
            if (e instanceof Creature c) {
                c.setHealth(c.getHealth() - 1);
                if (c.getHealth() <= 0) {
                    simMap.getWorldMap().remove(c.getPosition());
                }
            }
        }
    }
    private void movementPhase() {
        // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –∫–∞—Ä—Ç—ã. (–ß—Ç–æ–±—ã –Ω–µ –º–µ–Ω—è—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É –≤–æ –∏–∑–±–µ–∂–∞–Ω–∏–µ –æ—à–∏–±–æ–∫).
        List<Entity> snapshot = new ArrayList<>(simMap.getWorldMap().values());

        // –õ–æ–≥–∏–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ö–æ–¥–∞
        Map<Creature, Position> planned = new HashMap<>();
        for (Entity e : snapshot) {
            if (e instanceof Creature c) {
                Position p = c.planMove(simMap);
                if (p != null && simMap.inBounds(p.x(), p.y())) {
                    planned.put(c, p);
                }
            }
        }

        // –ö–∞—Ä—Ç–∞ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ —Å—É—â–µ—Å—Ç–≤
        Map<Position, Entity> startOcc = new HashMap<>();
        for (Entity e : snapshot) {
            startOcc.put(e.getPosition(), e);
        }

        // –ö–∞—Ä—Ç–∞ –∫—Ç–æ –∫—É–¥–∞ —Ö–æ—á–µ—Ç
        Map<Position, List<Creature>> wishers = new HashMap<>();
        for (var e : planned.entrySet()) {
            Position target = e.getValue();
            Creature who = e.getKey();
            wishers.computeIfAbsent(target, k -> new ArrayList<>()).add(who);
        }

        // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ö–æ–¥–æ–≤
        Set<Creature> moved = new HashSet<>();

        for (var e : wishers.entrySet()) {
            Position target = e.getKey();
            var list = e.getValue();

            if (list.size() != 1) {
                Collections.shuffle(list);
            }

            Creature c = list.get(0);
            if (moved.contains(c)) continue;

            // –ï—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤–æ —É–∂–µ –ù–ï –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–≤–æ–µ–π —Ç–µ–∫—É—â–µ–π (—Å—Ç–∞—Ä—Ç–æ–≤–æ–π –¥–ª—è —Ç–∏–∫–∞) –∫–ª–µ—Ç–∫–µ,
            // –∑–Ω–∞—á–∏—Ç –µ–≥–æ —Å—ä–µ–ª–∏/—Å–º–µ—Å—Ç–∏–ª–∏ —Ä–∞–Ω–µ–µ –≤ —ç—Ç–æ–º –∂–µ —Ç–∏–∫–µ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ–≥–æ —Ö–æ–¥.
            Entity stillThere = simMap.getWorldMap().get(c.getPosition());
            if (stillThere != c) {
                continue;
            }

            Entity occ = simMap.getEntityAt(target);
            if (c instanceof Herbivore && occ instanceof Creature) {
                continue; // —Ç—Ä–∞–≤–æ—è–¥–Ω–æ–µ –Ω–µ –∏–¥—ë—Ç –≤ –∑–∞–Ω—è—Ç–æ–µ
            }

            if (c instanceof Predator) {
                // —Ö–∏—â–Ω–∏–∫ –∏–¥—ë—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤ –∫–ª–µ—Ç–∫–µ –ª–∏–±–æ –ø—É—Å—Ç–æ, –ª–∏–±–æ –æ–≤—Ü–∞
                if (occ != null && !(occ instanceof Herbivore)) {
                    continue;
                }
            }


            c.applyMove(target, simMap);
            moved.add(c);


        }
    }
    private void reproductionPhase() {
        // === 1) –ë—É—Ñ–µ—Ä –Ω–æ–≤–æ—Ä–æ–∂–¥—ë–Ω–Ω—ã—Ö ===
        List<Entity> spawns = new ArrayList<>();

        // === 2) –§–∞–∑–∞ —Ä–∞–∑–º–Ω–æ–∂–µ–Ω–∏—è (–ø–æ—Å–ª–µ –¥–≤–∏–∂–µ–Ω–∏—è) ===
        // –¢–µ–∫—É—â–∏–π —Å—Ä–µ–∑ —Å—É—â–µ—Å—Ç–≤ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–π
        List<Entity> adults = new ArrayList<>(simMap.getWorldMap().values());
        for (Entity e : adults) {
            if (!(e instanceof Creature c)) continue;

            // –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —Ç–∏–∫–∞–µ–º –∫—É–ª–¥–∞—É–Ω —Ä–∞–∑ –≤ —Ç–∏–∫
            c.decrementReproCooldown();

            if (c.canReproduce()) {
                c.tryMakeOffspring(simMap).ifPresent(child -> {
                    spawns.add(child);
                    c.setHealth(c.getHealth() - c.reproCost());
                    c.setReproCooldown(3); // –ø–∞—É–∑–∞ –Ω–∞ —Ä–∞–∑–º–Ω–æ–∂–µ–Ω–∏–µ
                });
            }
        }

        // === 3) –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –±—É—Ñ–µ—Ä–∞ ===
        for (Entity child : spawns) {
            Position pos = child.getPosition();
            if (simMap.getEntityAt(pos) == null) { // –∑–∞—â–∏—Ç–∞ –æ—Ç –∫–æ–ª–ª–∏–∑–∏–π
                simMap.getWorldMap().put(pos, child);
            }
        }
    }
    private void grassGrowthPhase() {
            // 1) –°–Ω–∏–º–æ–∫ –∏ —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ç—Ä–∞–≤—ã
            List<Entity> snapshot = new ArrayList<>(simMap.getWorldMap().values());
            List<Grass> grasses = new ArrayList<>();
            for (Entity e : snapshot) {
                if (e instanceof Grass g) grasses.add(g);
            }

            // 2) –ö–∞–Ω–¥–∏–¥–∞—Ç—ã –Ω–∞ –ø–æ—Å–∞–¥–∫—É (–±–µ–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤)
            Set<Position> toPlant = new HashSet<>();

            // 3) –õ–æ–∫–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç –∫–∞–∂–¥–æ–π —Ç—Ä–∞–≤–∏–Ω–∫–∏ (4-—Å–æ—Å–µ–¥–µ–π)
            for (Grass g : grasses) {
                Position p = g.getPosition();
                int planted = 0;

                for (Direction d : Direction.values()) {
                    if (planted >= GRASS_MAX_NEIGHBOR_PLANTS) break;

                    int nx = p.x() + d.dx, ny = p.y() + d.dy;
                    if (!simMap.inBounds(nx, ny)) continue;

                    Position pos = new Position(nx, ny);
                    if (simMap.getEntityAt(pos) != null) continue;    // —Å–∞–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –≤ –ø—É—Å—Ç–æ–µ

                    if (rnd.nextDouble() < GRASS_SPREAD_PROB) {
                        toPlant.add(pos);
                        planted++;
                    }
                }
            }

            // 4) –°–ª—É—á–∞–π–Ω—ã–µ –ø–æ—Å–µ–≤—ã –ø–æ –∫–∞—Ä—Ç–µ (–¥–ª—è —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏ –≤—ã–º–∏—Ä–∞–Ω–∏–∏)
            for (int i = 0; i < GRASS_RANDOM_SEEDS; i++) {
                int x = rnd.nextInt(simMap.getWidth());
                int y = rnd.nextInt(simMap.getHeight());
                Position pos = new Position(x, y);
                if (simMap.getEntityAt(pos) == null && rnd.nextDouble() < GRASS_RANDOM_PROB) {
                    toPlant.add(pos);
                }
            }

            // 5) –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø–æ—Å–∞–¥–æ–∫
            for (Position pos : toPlant) {
                if (simMap.getEntityAt(pos) == null) {
                    simMap.getWorldMap().put(pos, new Grass(pos));
                }
            }
        }



    void nextTurn () {}
    void startSimulation () {}
    void stopSimulation () {}
    }